let handler = async (m, { conn, usedPrefix, command, args, isOwner, isAdmin, isROwner }) => {
let optionsFull = `*Op√ß√£o:* ‚ú® | WELCOME
*Comando:* ${usedPrefix + command} welcome
*Descri√ß√£o:* Ativar ou desativar as boas-vindas do grupo.

--------------------------------

*Op√ß√£o:* üåé | MODO PUBLICO
*Comando:* ${usedPrefix + command} public
*Descri√ß√£o:* O Bot se torna para uso p√∫blico e/ou privado.
*Nota:* Este comando s√≥ pode ser usado pelo propriet√°rio de bot.

--------------------------------

*Op√ß√£o:* ü•µ | MODO HORNY
*Comando:* ${usedPrefix + command} modohorny
*Descri√ß√£o:* Ativa ou desativa os comandos +18 do grupo.

--------------------------------

*Op√ß√£o:* üîó | ANTILINK
*Comando:* ${usedPrefix + command} antilink
*Descri√ß√£o:* Ative ou desative os anti-links do WhatsApp.
*Nota:* Voc√™ precisa ter a restri√ß√£o ativa.

--------------------------------

*Op√ß√£o:* üîó | ANTILINK 2
*Comando:* ${usedPrefix + command} antilink2
*Descri√ß√£o:* Habilite ou desabilite anti-links iniciando em HTTPS.
*Nota:* Voc√™ precisa ter a restri√ß√£o ativa.

--------------------------------

*Op√ß√£o:* üîé | DETECT
*Comando:* ${usedPrefix + command} detect
*Descri√ß√£o:* Ative ou desative notifica√ß√µes de altera√ß√µes no grupo.

--------------------------------

*Op√ß√£o:* üîé | DETECT 2
*Comando:* ${usedPrefix + command} detect2
*Descri√ß√£o:* Detecte mudan√ßas no grupo e mantenha uma melhor gest√£o.

--------------------------------

*Op√ß√£o:* ‚ùó | RESTRICT
*Comando:* ${usedPrefix + command} restrict
*Descri√ß√£o:* Ative ou desative as restri√ß√µes de Bot, como remover ou adicionar pessoas a um grupo.
*Nota:* Este comando s√≥ pode ser usado pelo propriet√°rio do bot.

--------------------------------

*Op√ß√£o:* ‚òëÔ∏è | AUTOREAD
*Comando:* ${usedPrefix + command} autoread
*Descri√ß√£o:* Marque mensagens e status automaticamente como lidos.
*Nota:* Este comando s√≥ pode ser usado pelo propriet√°rio do bot.

--------------------------------

*Op√ß√£o:* üîä | AUDIOS
*Comando:* ${usedPrefix + command} audios
*Descri√ß√£o:* Ativa ou desativa os comandos de √°udio sem prefixos, no grupo.

--------------------------------

*Op√ß√£o:* üëæ | AUTOSTICKER
*Comando:* ${usedPrefix + command} autosticker 
*Descri√ß√£o:* Todas as imagens ou v√≠deos enviados no grupo tornam-se stickers.

--------------------------------

*Op√ß√£o:* üí¨ | PCONLY
*Comando:* ${usedPrefix + command} pconly
*Descri√ß√£o:* O Bot s√≥ responder√° a comandos se for um chat privado.
*Nota:* Este comando s√≥ pode ser usado pelo propriet√°rio do bot.

--------------------------------

*Op√ß√£o:* üè¢ | GCONLY
*Comando:* ${usedPrefix + command} gconly
*Descri√ß√£o:* O Bot s√≥ responder√° a comandos se for um grupo.
*Nota:* Este comando s√≥ pode ser usado pelo propriet√°rio do bot.

--------------------------------

*Op√ß√£o:* ‚ùå | ANTIVIEWONCE 
*Comando:* ${usedPrefix + command} antiviewonce
*Descri√ß√£o:* As imagens enviadas para ver apenas uma vez, s√£o reenviadas normalmente pelo Bot.

--------------------------------

*Op√ß√£o:* üìµ | ANTILLAMADAS
*Comando:* ${usedPrefix + command} anticall
*Descri√ß√£o:* O Bot bloquear√° as pessoas que ligarem para o Bot.
*Nota:* Este comando s√≥ pode ser usado pelo propriet√°rio do bot.

--------------------------------

*Op√ß√£o:* üí¨ | ANTIPRIVADO
*Comando:* ${usedPrefix + command} antiprivado
*Descri√ß√£o:* O Bot bloquear√° as pessoas que escrevem para o privado do Bot.
*Nota:* Este comando s√≥ pode ser usado pelo propriet√°rio do bot.

--------------------------------

*Op√ß√£o:* ü§¨ | ANTITOXIC
*Comando:* ${usedPrefix + command} antitoxic
*Descri√ß√£o:* Detecta palavr√µes e avisa o participante do grupo, antes de ser eliminado.
*Nota:* Voc√™ precisa ter a restri√ß√£o ativa.

--------------------------------

*Op√ß√£o:* üï∏Ô∏è | ANTITRABAS
*Comando:* ${usedPrefix + command} antitraba
*Descri√ß√£o:* O Bot detecta textos longos que podem ser v√≠rus e causam lag no chat e deleta o usu√°rio.
*Nota:* Voc√™ precisa ter a restri√ß√£o ativa.

--------------------------------

*Op√ß√£o:* üëé | ANTIARABES
*Comando:* ${usedPrefix + command} antiarabes
*Descri√ß√£o:* Se um n√∫mero ar√°bico entrar no grupo, o Bot o remover√° automaticamente.
*Nota:* Voc√™ precisa ter as boas-vindas e a restri√ß√£o ativas.

--------------------------------

*Op√ß√£o:* üëé | ANTIARABES 2
*Comando:* ${usedPrefix + command} antiarabes2
*Descri√ß√£o:* Se um n√∫mero ar√°bico for gravado no grupo, o Bot o exclui automaticamente.
*Nota:* Voc√™ precisa ter a restri√ß√£o ativa.

--------------------------------

*Op√ß√£o:* ü§ñ | MODEJADIBOT
*Comando:* ${usedPrefix + command} modejadibot
*Descri√ß√£o:* Ativar ou desativar o uso de comandos para subbots (${usedPrefix}serbot / ${usedPrefix}jadibot). 
*Nota:* Este comando s√≥ pode ser usado pelo propriet√°rio do bot.

--------------------------------

*Op√ß√£o:* üëë | MODOADMIN
*Comando:* ${usedPrefix + command} modoadmin
*Descri√ß√£o:* O Bot responder√° apenas aos administradores do grupo.

--------------------------------

*Op√ß√£o:* üòÉ | SIMSIMI
*Comando:* ${usedPrefix + command} simsimi
*Descri√ß√£o:* O Bot come√ßar√° a responder √†s mensagens usando o SimSimi AI.

--------------------------------

*Op√ß√£o:* ‚è≥ | ANTISPAM
*Comando:* ${usedPrefix + command} antispam
*Descri√ß√£o:* O Bot detecta quando um usu√°rio envia spam ao comando e o bane por 5 segundos e o avisa.
*Nota:* Este comando s√≥ pode ser usado pelo propriet√°rio do bot.`.trim()

let isEnable = /true|enable|(turn)?on|1/i.test(command)
let chat = global.db.data.chats[m.chat]
let user = global.db.data.users[m.sender]
let bot = global.db.data.settings[conn.user.jid] || {}
let type = (args[0] || '').toLowerCase()
let isAll = false, isUser = false
switch (type) {
case 'welcome':
if (!m.isGroup) {
if (!isOwner) {
global.dfail('group', m, conn)
throw false
}
} else if (!(isAdmin || isOwner || isROwner)) {
global.dfail('admin', m, conn)
throw false
}
chat.welcome = isEnable
break
case 'detect':
if (!m.isGroup) {
if (!isOwner) {
global.dfail('group', m, conn)
throw false
}
} else if (!isAdmin) {
global.dfail('admin', m, conn)
throw false
}
chat.detect = isEnable
break
case 'detect2':
if (!m.isGroup) {
if (!isOwner) {
global.dfail('group', m, conn)
throw false
}
} else if (!isAdmin) {
global.dfail('admin', m, conn)
throw false
}
chat.detect2 = isEnable
break    
case 'simsimi':
if (m.isGroup) {
if (!(isAdmin || isOwner)) {
global.dfail('admin', m, conn)
throw false
}}
chat.simi = isEnable
break   
case 'antiporno':
if (m.isGroup) {
if (!(isAdmin || isOwner)) {
global.dfail('admin', m, conn)
throw false
}}
chat.antiporno = isEnable
break        
case 'delete':
if (m.isGroup) {
if (!(isAdmin || isOwner)) {
global.dfail('admin', m, conn)
throw false
}}
chat.delete = isEnable
break
case 'antidelete':
if (m.isGroup) {
if (!(isAdmin || isOwner)) {
global.dfail('admin', m, conn)
throw false
}}
chat.delete = !isEnable
break
case 'public':
isAll = true
if (!isROwner) {
global.dfail('rowner', m, conn)
throw false
}
global.opts['self'] = !isEnable
break
case 'antilink':
if (m.isGroup) {
if (!(isAdmin || isOwner)) {
global.dfail('admin', m, conn)
throw false
}}
chat.antiLink = isEnable
break
case 'antilink2':
if (m.isGroup) {
if (!(isAdmin || isOwner)) {
global.dfail('admin', m, conn)
throw false
}}
chat.antiLink2 = isEnable 
break
case 'antiviewonce':
if (m.isGroup) {
if (!(isAdmin || isOwner)) {
global.dfail('admin', m, conn)
throw false
}}
chat.antiviewonce = isEnable 
break
case 'modohorny':
if (m.isGroup) {
if (!(isAdmin || isOwner)) {
global.dfail('admin', m, conn)
throw false
}}
chat.modohorny = isEnable          
break
case 'modoadmin':
if (m.isGroup) {
if (!(isAdmin || isOwner)) {
global.dfail('admin', m, conn)
throw false
}}
chat.modoadmin = isEnable          
break    
case 'autosticker':
if (m.isGroup) {
if (!(isAdmin || isOwner)) {
global.dfail('admin', m, conn)
throw false
}}
chat.autosticker = isEnable          
break
case 'audios':
if (m.isGroup) {
if (!(isAdmin || isOwner)) {
global.dfail('admin', m, conn)
throw false
}}
chat.audios = isEnable          
break
case 'restrict':
isAll = true
if (!isOwner) {
global.dfail('owner', m, conn)
throw false
}
bot.restrict = isEnable
break
case 'nyimak':
isAll = true
if (!isROwner) {
global.dfail('rowner', m, conn)
throw false
}
global.opts['nyimak'] = isEnable
break
case 'autoread':
isAll = true
if (!isROwner) {
global.dfail('rowner', m, conn)
throw false
}
bot.autoread2 = isEnable    
global.opts['autoread'] = isEnable  
break
case 'pconly':
case 'privateonly':
isAll = true
if (!isROwner) {
global.dfail('rowner', m, conn)
throw false
}
global.opts['pconly'] = isEnable
break
case 'gconly':
case 'grouponly':
isAll = true
if (!isROwner) {
global.dfail('rowner', m, conn)
throw false
}
global.opts['gconly'] = isEnable
break
case 'swonly':
case 'statusonly':
isAll = true
if (!isROwner) {
global.dfail('rowner', m, conn)
throw false
}
global.opts['swonly'] = isEnable
break
case 'anticall':
isAll = true
if (!isROwner) {
global.dfail('rowner', m, conn)
throw false
}
bot.antiCall = isEnable
break
case 'antiprivado':
isAll = true
if (!isROwner) {
global.dfail('rowner', m, conn)
throw false
}
bot.antiPrivate = isEnable
break
case 'modejadibot':
isAll = true
if (!isROwner) {
global.dfail('rowner', m, conn)
throw false
}
bot.modejadibot = isEnable
break     
case 'antispam':
isAll = true
if (!isROwner) {
global.dfail('rowner', m, conn)
throw false
}
bot.antispam = isEnable    
break
case 'antitoxic':
if (m.isGroup) {
if (!(isAdmin || isOwner)) {
global.dfail('admin', m, conn)
throw false
}}
chat.antiToxic = isEnable
break
case 'antitraba':
if (m.isGroup) {
if (!(isAdmin || isOwner)) {
global.dfail('admin', m, conn)
throw false
}}
chat.antiTraba = isEnable
break
case 'antiarabes':
if (m.isGroup) {
if (!(isAdmin || isOwner)) {
global.dfail('admin', m, conn)
throw false
}}
chat.antiArab = isEnable  
break
case 'antiarabes2':
if (m.isGroup) {
if (!(isAdmin || isOwner)) {
global.dfail('admin', m, conn)
throw false
}}
chat.antiArab2 = isEnable  
break    
default:
if (!/[01]/.test(command)) return await conn.sendMessage(m.chat, { text: optionsFull }, { quoted: m })
throw false
}
conn.sendMessage(m.chat, { text: `üóÇÔ∏è Op√ß√£o: ${type}\nüéöÔ∏è Estado: ${isEnable ? 'Ativado' : 'Desativado'}\nüì£ Para: ${isAll ? 'ESTE BOT' : isUser ? '' : 'ESTE CHAT'}` }, { quoted: m })        
}
handler.help = ['en', 'dis'].map(v => v + 'able <option>')
handler.tags = ['group', 'owner']
handler.command = /^((en|dis)able|(tru|fals)e|(turn)?[01])$/i
export default handler
